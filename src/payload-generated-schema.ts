/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import type {} from "@payloadcms/db-postgres";
import {
  pgTable,
  index,
  uniqueIndex,
  foreignKey,
  serial,
  timestamp,
  varchar,
  numeric,
  jsonb,
  integer,
  boolean,
  pgEnum,
} from "@payloadcms/db-postgres/drizzle/pg-core";
import { sql, relations } from "@payloadcms/db-postgres/drizzle";
export const enum_proyectos_tipo_sistema = pgEnum("enum_proyectos_tipo_sistema", [
  "Aplicaci贸n M贸vil",
  "Aplicaci贸n de Escritorio",
  "Aplicaci贸n Web",
]);
export const enum_proyectos_estado = pgEnum("enum_proyectos_estado", [
  "Activo",
  "Inactivo",
  "Finalizado",
]);

export const users = pgTable(
  "users",
  {
    id: serial("id").primaryKey(),
    updatedAt: timestamp("updated_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    email: varchar("email").notNull(),
    resetPasswordToken: varchar("reset_password_token"),
    resetPasswordExpiration: timestamp("reset_password_expiration", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar("salt"),
    hash: varchar("hash"),
    loginAttempts: numeric("login_attempts").default("0"),
    lockUntil: timestamp("lock_until", { mode: "string", withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    users_updated_at_idx: index("users_updated_at_idx").on(columns.updatedAt),
    users_created_at_idx: index("users_created_at_idx").on(columns.createdAt),
    users_email_idx: uniqueIndex("users_email_idx").on(columns.email),
  }),
);

export const media = pgTable(
  "media",
  {
    id: serial("id").primaryKey(),
    alt: varchar("alt").notNull(),
    updatedAt: timestamp("updated_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    url: varchar("url"),
    thumbnailURL: varchar("thumbnail_u_r_l"),
    filename: varchar("filename"),
    mimeType: varchar("mime_type"),
    filesize: numeric("filesize"),
    width: numeric("width"),
    height: numeric("height"),
    focalX: numeric("focal_x"),
    focalY: numeric("focal_y"),
  },
  (columns) => ({
    media_updated_at_idx: index("media_updated_at_idx").on(columns.updatedAt),
    media_created_at_idx: index("media_created_at_idx").on(columns.createdAt),
    media_filename_idx: uniqueIndex("media_filename_idx").on(columns.filename),
  }),
);

export const cargos = pgTable(
  "cargos",
  {
    id: serial("id").primaryKey(),
    nombre: varchar("nombre").notNull(),
    descripcion: jsonb("descripcion").notNull(),
    updatedAt: timestamp("updated_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    cargos_updated_at_idx: index("cargos_updated_at_idx").on(columns.updatedAt),
    cargos_created_at_idx: index("cargos_created_at_idx").on(columns.createdAt),
  }),
);

export const eventos_fechas_horas = pgTable(
  "eventos_fechas_horas",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    fecha_hora: timestamp("fecha_hora", { mode: "string", withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    _orderIdx: index("eventos_fechas_horas_order_idx").on(columns._order),
    _parentIDIdx: index("eventos_fechas_horas_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [eventos.id],
      name: "eventos_fechas_horas_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const eventos_imagenes_secundarias = pgTable(
  "eventos_imagenes_secundarias",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    imagen: integer("imagen_id").references(() => media.id, {
      onDelete: "set null",
    }),
  },
  (columns) => ({
    _orderIdx: index("eventos_imagenes_secundarias_order_idx").on(columns._order),
    _parentIDIdx: index("eventos_imagenes_secundarias_parent_id_idx").on(columns._parentID),
    eventos_imagenes_secundarias_imagen_idx: index("eventos_imagenes_secundarias_imagen_idx").on(
      columns.imagen,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [eventos.id],
      name: "eventos_imagenes_secundarias_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const eventos_asistentes = pgTable(
  "eventos_asistentes",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    nombre: varchar("nombre").notNull(),
    apellido: varchar("apellido").notNull(),
    email: varchar("email").notNull(),
    expediente: varchar("expediente"),
  },
  (columns) => ({
    _orderIdx: index("eventos_asistentes_order_idx").on(columns._order),
    _parentIDIdx: index("eventos_asistentes_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [eventos.id],
      name: "eventos_asistentes_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const eventos_requisitos = pgTable(
  "eventos_requisitos",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    nombre_requisito: jsonb("nombre_requisito").notNull(),
    detalles: jsonb("detalles"),
  },
  (columns) => ({
    _orderIdx: index("eventos_requisitos_order_idx").on(columns._order),
    _parentIDIdx: index("eventos_requisitos_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [eventos.id],
      name: "eventos_requisitos_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const eventos_publicaciones = pgTable(
  "eventos_publicaciones",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    titulo_publicacion: varchar("titulo_publicacion").notNull(),
    red_social: integer("red_social_id")
      .notNull()
      .references(() => redes_sociales.id, {
        onDelete: "set null",
      }),
    link: varchar("link").notNull(),
  },
  (columns) => ({
    _orderIdx: index("eventos_publicaciones_order_idx").on(columns._order),
    _parentIDIdx: index("eventos_publicaciones_parent_id_idx").on(columns._parentID),
    eventos_publicaciones_red_social_idx: index("eventos_publicaciones_red_social_idx").on(
      columns.red_social,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [eventos.id],
      name: "eventos_publicaciones_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const eventos = pgTable(
  "eventos",
  {
    id: serial("id").primaryKey(),
    tipo: varchar("tipo"),
    titulo: varchar("titulo").notNull(),
    enable_multi_dates: boolean("enable_multi_dates").default(false),
    fecha_unica: timestamp("fecha_unica", { mode: "string", withTimezone: true, precision: 3 }),
    fecha_inicio: timestamp("fecha_inicio", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }).notNull(),
    fecha_fin: timestamp("fecha_fin", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }).notNull(),
    lugar: varchar("lugar").notNull(),
    duracion: numeric("duracion").notNull(),
    cupos: numeric("cupos").notNull(),
    imagen_principal: integer("imagen_principal_id")
      .notNull()
      .references(() => media.id, {
        onDelete: "set null",
      }),
    descripcion: jsonb("descripcion"),
    updatedAt: timestamp("updated_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    eventos_imagen_principal_idx: index("eventos_imagen_principal_idx").on(
      columns.imagen_principal,
    ),
    eventos_updated_at_idx: index("eventos_updated_at_idx").on(columns.updatedAt),
    eventos_created_at_idx: index("eventos_created_at_idx").on(columns.createdAt),
  }),
);

export const eventos_rels = pgTable(
  "eventos_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    miembrosID: integer("miembros_id"),
  },
  (columns) => ({
    order: index("eventos_rels_order_idx").on(columns.order),
    parentIdx: index("eventos_rels_parent_idx").on(columns.parent),
    pathIdx: index("eventos_rels_path_idx").on(columns.path),
    eventos_rels_miembros_id_idx: index("eventos_rels_miembros_id_idx").on(columns.miembrosID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [eventos.id],
      name: "eventos_rels_parent_fk",
    }).onDelete("cascade"),
    miembrosIdFk: foreignKey({
      columns: [columns["miembrosID"]],
      foreignColumns: [miembros.id],
      name: "eventos_rels_miembros_fk",
    }).onDelete("cascade"),
  }),
);

export const miembros_redes = pgTable(
  "miembros_redes",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    nombre: integer("nombre_id").references(() => redes_sociales.id, {
      onDelete: "set null",
    }),
    link: varchar("link"),
  },
  (columns) => ({
    _orderIdx: index("miembros_redes_order_idx").on(columns._order),
    _parentIDIdx: index("miembros_redes_parent_id_idx").on(columns._parentID),
    miembros_redes_nombre_idx: index("miembros_redes_nombre_idx").on(columns.nombre),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [miembros.id],
      name: "miembros_redes_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const miembros_fotos_secundarias = pgTable(
  "miembros_fotos_secundarias",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    imagen: integer("imagen_id").references(() => media.id, {
      onDelete: "set null",
    }),
  },
  (columns) => ({
    _orderIdx: index("miembros_fotos_secundarias_order_idx").on(columns._order),
    _parentIDIdx: index("miembros_fotos_secundarias_parent_id_idx").on(columns._parentID),
    miembros_fotos_secundarias_imagen_idx: index("miembros_fotos_secundarias_imagen_idx").on(
      columns.imagen,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [miembros.id],
      name: "miembros_fotos_secundarias_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const miembros = pgTable(
  "miembros",
  {
    id: serial("id").primaryKey(),
    nombres: varchar("nombres").notNull(),
    apellidos: varchar("apellidos").notNull(),
    email: varchar("email").notNull(),
    slug: varchar("slug").notNull(),
    fecha_entrada: timestamp("fecha_entrada", { mode: "string", withTimezone: true, precision: 3 }),
    fecha_salida: timestamp("fecha_salida", { mode: "string", withTimezone: true, precision: 3 }),
    foto: integer("foto_id")
      .notNull()
      .references(() => media.id, {
        onDelete: "set null",
      }),
    cargo: integer("cargo_id")
      .notNull()
      .references(() => cargos.id, {
        onDelete: "set null",
      }),
    updatedAt: timestamp("updated_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    miembros_email_idx: uniqueIndex("miembros_email_idx").on(columns.email),
    miembros_slug_idx: uniqueIndex("miembros_slug_idx").on(columns.slug),
    miembros_foto_idx: index("miembros_foto_idx").on(columns.foto),
    miembros_cargo_idx: index("miembros_cargo_idx").on(columns.cargo),
    miembros_updated_at_idx: index("miembros_updated_at_idx").on(columns.updatedAt),
    miembros_created_at_idx: index("miembros_created_at_idx").on(columns.createdAt),
  }),
);

export const proyectos_imagenes_secundarias = pgTable(
  "proyectos_imagenes_secundarias",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    imagen: integer("imagen_id").references(() => media.id, {
      onDelete: "set null",
    }),
  },
  (columns) => ({
    _orderIdx: index("proyectos_imagenes_secundarias_order_idx").on(columns._order),
    _parentIDIdx: index("proyectos_imagenes_secundarias_parent_id_idx").on(columns._parentID),
    proyectos_imagenes_secundarias_imagen_idx: index(
      "proyectos_imagenes_secundarias_imagen_idx",
    ).on(columns.imagen),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [proyectos.id],
      name: "proyectos_imagenes_secundarias_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const proyectos_tecnologias = pgTable(
  "proyectos_tecnologias",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    tecnologia: integer("tecnologia_id").references(() => tecnologias.id, {
      onDelete: "set null",
    }),
  },
  (columns) => ({
    _orderIdx: index("proyectos_tecnologias_order_idx").on(columns._order),
    _parentIDIdx: index("proyectos_tecnologias_parent_id_idx").on(columns._parentID),
    proyectos_tecnologias_tecnologia_idx: index("proyectos_tecnologias_tecnologia_idx").on(
      columns.tecnologia,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [proyectos.id],
      name: "proyectos_tecnologias_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const proyectos = pgTable(
  "proyectos",
  {
    id: serial("id").primaryKey(),
    nombre: varchar("nombre").notNull(),
    tipo_sistema: enum_proyectos_tipo_sistema("tipo_sistema").notNull(),
    descripcion: jsonb("descripcion"),
    subtitulo: varchar("subtitulo").notNull(),
    imagen_principal: integer("imagen_principal_id")
      .notNull()
      .references(() => media.id, {
        onDelete: "set null",
      }),
    fecha_inicio: timestamp("fecha_inicio", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }).notNull(),
    fecha_termino: timestamp("fecha_termino", { mode: "string", withTimezone: true, precision: 3 }),
    estado: enum_proyectos_estado("estado").notNull(),
    url: varchar("url"),
    github_url: varchar("github_url"),
    updatedAt: timestamp("updated_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    proyectos_imagen_principal_idx: index("proyectos_imagen_principal_idx").on(
      columns.imagen_principal,
    ),
    proyectos_updated_at_idx: index("proyectos_updated_at_idx").on(columns.updatedAt),
    proyectos_created_at_idx: index("proyectos_created_at_idx").on(columns.createdAt),
  }),
);

export const proyectos_rels = pgTable(
  "proyectos_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    miembrosID: integer("miembros_id"),
  },
  (columns) => ({
    order: index("proyectos_rels_order_idx").on(columns.order),
    parentIdx: index("proyectos_rels_parent_idx").on(columns.parent),
    pathIdx: index("proyectos_rels_path_idx").on(columns.path),
    proyectos_rels_miembros_id_idx: index("proyectos_rels_miembros_id_idx").on(columns.miembrosID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [proyectos.id],
      name: "proyectos_rels_parent_fk",
    }).onDelete("cascade"),
    miembrosIdFk: foreignKey({
      columns: [columns["miembrosID"]],
      foreignColumns: [miembros.id],
      name: "proyectos_rels_miembros_fk",
    }).onDelete("cascade"),
  }),
);

export const redes_sociales = pgTable(
  "redes_sociales",
  {
    id: serial("id").primaryKey(),
    nombre: varchar("nombre").notNull(),
    logo: integer("logo_id")
      .notNull()
      .references(() => media.id, {
        onDelete: "set null",
      }),
    logo_monocromatico: integer("logo_monocromatico_id")
      .notNull()
      .references(() => media.id, {
        onDelete: "set null",
      }),
    updatedAt: timestamp("updated_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    redes_sociales_logo_idx: index("redes_sociales_logo_idx").on(columns.logo),
    redes_sociales_logo_monocromatico_idx: index("redes_sociales_logo_monocromatico_idx").on(
      columns.logo_monocromatico,
    ),
    redes_sociales_updated_at_idx: index("redes_sociales_updated_at_idx").on(columns.updatedAt),
    redes_sociales_created_at_idx: index("redes_sociales_created_at_idx").on(columns.createdAt),
  }),
);

export const tecnologias = pgTable(
  "tecnologias",
  {
    id: serial("id").primaryKey(),
    nombre: varchar("nombre").notNull(),
    logo: integer("logo_id")
      .notNull()
      .references(() => media.id, {
        onDelete: "set null",
      }),
    logo_monocromatico: integer("logo_monocromatico_id")
      .notNull()
      .references(() => media.id, {
        onDelete: "set null",
      }),
    updatedAt: timestamp("updated_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    tecnologias_logo_idx: index("tecnologias_logo_idx").on(columns.logo),
    tecnologias_logo_monocromatico_idx: index("tecnologias_logo_monocromatico_idx").on(
      columns.logo_monocromatico,
    ),
    tecnologias_updated_at_idx: index("tecnologias_updated_at_idx").on(columns.updatedAt),
    tecnologias_created_at_idx: index("tecnologias_created_at_idx").on(columns.createdAt),
  }),
);

export const payload_locked_documents = pgTable(
  "payload_locked_documents",
  {
    id: serial("id").primaryKey(),
    globalSlug: varchar("global_slug"),
    updatedAt: timestamp("updated_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index("payload_locked_documents_global_slug_idx").on(
      columns.globalSlug,
    ),
    payload_locked_documents_updated_at_idx: index("payload_locked_documents_updated_at_idx").on(
      columns.updatedAt,
    ),
    payload_locked_documents_created_at_idx: index("payload_locked_documents_created_at_idx").on(
      columns.createdAt,
    ),
  }),
);

export const payload_locked_documents_rels = pgTable(
  "payload_locked_documents_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    usersID: integer("users_id"),
    mediaID: integer("media_id"),
    cargosID: integer("cargos_id"),
    eventosID: integer("eventos_id"),
    miembrosID: integer("miembros_id"),
    proyectosID: integer("proyectos_id"),
    redes_socialesID: integer("redes_sociales_id"),
    tecnologiasID: integer("tecnologias_id"),
  },
  (columns) => ({
    order: index("payload_locked_documents_rels_order_idx").on(columns.order),
    parentIdx: index("payload_locked_documents_rels_parent_idx").on(columns.parent),
    pathIdx: index("payload_locked_documents_rels_path_idx").on(columns.path),
    payload_locked_documents_rels_users_id_idx: index(
      "payload_locked_documents_rels_users_id_idx",
    ).on(columns.usersID),
    payload_locked_documents_rels_media_id_idx: index(
      "payload_locked_documents_rels_media_id_idx",
    ).on(columns.mediaID),
    payload_locked_documents_rels_cargos_id_idx: index(
      "payload_locked_documents_rels_cargos_id_idx",
    ).on(columns.cargosID),
    payload_locked_documents_rels_eventos_id_idx: index(
      "payload_locked_documents_rels_eventos_id_idx",
    ).on(columns.eventosID),
    payload_locked_documents_rels_miembros_id_idx: index(
      "payload_locked_documents_rels_miembros_id_idx",
    ).on(columns.miembrosID),
    payload_locked_documents_rels_proyectos_id_idx: index(
      "payload_locked_documents_rels_proyectos_id_idx",
    ).on(columns.proyectosID),
    payload_locked_documents_rels_redes_sociales_id_idx: index(
      "payload_locked_documents_rels_redes_sociales_id_idx",
    ).on(columns.redes_socialesID),
    payload_locked_documents_rels_tecnologias_id_idx: index(
      "payload_locked_documents_rels_tecnologias_id_idx",
    ).on(columns.tecnologiasID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [payload_locked_documents.id],
      name: "payload_locked_documents_rels_parent_fk",
    }).onDelete("cascade"),
    usersIdFk: foreignKey({
      columns: [columns["usersID"]],
      foreignColumns: [users.id],
      name: "payload_locked_documents_rels_users_fk",
    }).onDelete("cascade"),
    mediaIdFk: foreignKey({
      columns: [columns["mediaID"]],
      foreignColumns: [media.id],
      name: "payload_locked_documents_rels_media_fk",
    }).onDelete("cascade"),
    cargosIdFk: foreignKey({
      columns: [columns["cargosID"]],
      foreignColumns: [cargos.id],
      name: "payload_locked_documents_rels_cargos_fk",
    }).onDelete("cascade"),
    eventosIdFk: foreignKey({
      columns: [columns["eventosID"]],
      foreignColumns: [eventos.id],
      name: "payload_locked_documents_rels_eventos_fk",
    }).onDelete("cascade"),
    miembrosIdFk: foreignKey({
      columns: [columns["miembrosID"]],
      foreignColumns: [miembros.id],
      name: "payload_locked_documents_rels_miembros_fk",
    }).onDelete("cascade"),
    proyectosIdFk: foreignKey({
      columns: [columns["proyectosID"]],
      foreignColumns: [proyectos.id],
      name: "payload_locked_documents_rels_proyectos_fk",
    }).onDelete("cascade"),
    redes_socialesIdFk: foreignKey({
      columns: [columns["redes_socialesID"]],
      foreignColumns: [redes_sociales.id],
      name: "payload_locked_documents_rels_redes_sociales_fk",
    }).onDelete("cascade"),
    tecnologiasIdFk: foreignKey({
      columns: [columns["tecnologiasID"]],
      foreignColumns: [tecnologias.id],
      name: "payload_locked_documents_rels_tecnologias_fk",
    }).onDelete("cascade"),
  }),
);

export const payload_preferences = pgTable(
  "payload_preferences",
  {
    id: serial("id").primaryKey(),
    key: varchar("key"),
    value: jsonb("value"),
    updatedAt: timestamp("updated_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index("payload_preferences_key_idx").on(columns.key),
    payload_preferences_updated_at_idx: index("payload_preferences_updated_at_idx").on(
      columns.updatedAt,
    ),
    payload_preferences_created_at_idx: index("payload_preferences_created_at_idx").on(
      columns.createdAt,
    ),
  }),
);

export const payload_preferences_rels = pgTable(
  "payload_preferences_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    usersID: integer("users_id"),
  },
  (columns) => ({
    order: index("payload_preferences_rels_order_idx").on(columns.order),
    parentIdx: index("payload_preferences_rels_parent_idx").on(columns.parent),
    pathIdx: index("payload_preferences_rels_path_idx").on(columns.path),
    payload_preferences_rels_users_id_idx: index("payload_preferences_rels_users_id_idx").on(
      columns.usersID,
    ),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [payload_preferences.id],
      name: "payload_preferences_rels_parent_fk",
    }).onDelete("cascade"),
    usersIdFk: foreignKey({
      columns: [columns["usersID"]],
      foreignColumns: [users.id],
      name: "payload_preferences_rels_users_fk",
    }).onDelete("cascade"),
  }),
);

export const payload_migrations = pgTable(
  "payload_migrations",
  {
    id: serial("id").primaryKey(),
    name: varchar("name"),
    batch: numeric("batch"),
    updatedAt: timestamp("updated_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", { mode: "string", withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index("payload_migrations_updated_at_idx").on(
      columns.updatedAt,
    ),
    payload_migrations_created_at_idx: index("payload_migrations_created_at_idx").on(
      columns.createdAt,
    ),
  }),
);

export const relations_users = relations(users, () => ({}));
export const relations_media = relations(media, () => ({}));
export const relations_cargos = relations(cargos, () => ({}));
export const relations_eventos_fechas_horas = relations(eventos_fechas_horas, ({ one }) => ({
  _parentID: one(eventos, {
    fields: [eventos_fechas_horas._parentID],
    references: [eventos.id],
    relationName: "fechas_horas",
  }),
}));
export const relations_eventos_imagenes_secundarias = relations(
  eventos_imagenes_secundarias,
  ({ one }) => ({
    _parentID: one(eventos, {
      fields: [eventos_imagenes_secundarias._parentID],
      references: [eventos.id],
      relationName: "imagenes_secundarias",
    }),
    imagen: one(media, {
      fields: [eventos_imagenes_secundarias.imagen],
      references: [media.id],
      relationName: "imagen",
    }),
  }),
);
export const relations_eventos_asistentes = relations(eventos_asistentes, ({ one }) => ({
  _parentID: one(eventos, {
    fields: [eventos_asistentes._parentID],
    references: [eventos.id],
    relationName: "asistentes",
  }),
}));
export const relations_eventos_requisitos = relations(eventos_requisitos, ({ one }) => ({
  _parentID: one(eventos, {
    fields: [eventos_requisitos._parentID],
    references: [eventos.id],
    relationName: "requisitos",
  }),
}));
export const relations_eventos_publicaciones = relations(eventos_publicaciones, ({ one }) => ({
  _parentID: one(eventos, {
    fields: [eventos_publicaciones._parentID],
    references: [eventos.id],
    relationName: "publicaciones",
  }),
  red_social: one(redes_sociales, {
    fields: [eventos_publicaciones.red_social],
    references: [redes_sociales.id],
    relationName: "red_social",
  }),
}));
export const relations_eventos_rels = relations(eventos_rels, ({ one }) => ({
  parent: one(eventos, {
    fields: [eventos_rels.parent],
    references: [eventos.id],
    relationName: "_rels",
  }),
  miembrosID: one(miembros, {
    fields: [eventos_rels.miembrosID],
    references: [miembros.id],
    relationName: "miembros",
  }),
}));
export const relations_eventos = relations(eventos, ({ one, many }) => ({
  fechas_horas: many(eventos_fechas_horas, {
    relationName: "fechas_horas",
  }),
  imagen_principal: one(media, {
    fields: [eventos.imagen_principal],
    references: [media.id],
    relationName: "imagen_principal",
  }),
  imagenes_secundarias: many(eventos_imagenes_secundarias, {
    relationName: "imagenes_secundarias",
  }),
  asistentes: many(eventos_asistentes, {
    relationName: "asistentes",
  }),
  requisitos: many(eventos_requisitos, {
    relationName: "requisitos",
  }),
  publicaciones: many(eventos_publicaciones, {
    relationName: "publicaciones",
  }),
  _rels: many(eventos_rels, {
    relationName: "_rels",
  }),
}));
export const relations_miembros_redes = relations(miembros_redes, ({ one }) => ({
  _parentID: one(miembros, {
    fields: [miembros_redes._parentID],
    references: [miembros.id],
    relationName: "redes",
  }),
  nombre: one(redes_sociales, {
    fields: [miembros_redes.nombre],
    references: [redes_sociales.id],
    relationName: "nombre",
  }),
}));
export const relations_miembros_fotos_secundarias = relations(
  miembros_fotos_secundarias,
  ({ one }) => ({
    _parentID: one(miembros, {
      fields: [miembros_fotos_secundarias._parentID],
      references: [miembros.id],
      relationName: "fotos-secundarias",
    }),
    imagen: one(media, {
      fields: [miembros_fotos_secundarias.imagen],
      references: [media.id],
      relationName: "imagen",
    }),
  }),
);
export const relations_miembros = relations(miembros, ({ one, many }) => ({
  redes: many(miembros_redes, {
    relationName: "redes",
  }),
  foto: one(media, {
    fields: [miembros.foto],
    references: [media.id],
    relationName: "foto",
  }),
  "fotos-secundarias": many(miembros_fotos_secundarias, {
    relationName: "fotos-secundarias",
  }),
  cargo: one(cargos, {
    fields: [miembros.cargo],
    references: [cargos.id],
    relationName: "cargo",
  }),
}));
export const relations_proyectos_imagenes_secundarias = relations(
  proyectos_imagenes_secundarias,
  ({ one }) => ({
    _parentID: one(proyectos, {
      fields: [proyectos_imagenes_secundarias._parentID],
      references: [proyectos.id],
      relationName: "imagenes_secundarias",
    }),
    imagen: one(media, {
      fields: [proyectos_imagenes_secundarias.imagen],
      references: [media.id],
      relationName: "imagen",
    }),
  }),
);
export const relations_proyectos_tecnologias = relations(proyectos_tecnologias, ({ one }) => ({
  _parentID: one(proyectos, {
    fields: [proyectos_tecnologias._parentID],
    references: [proyectos.id],
    relationName: "tecnologias",
  }),
  tecnologia: one(tecnologias, {
    fields: [proyectos_tecnologias.tecnologia],
    references: [tecnologias.id],
    relationName: "tecnologia",
  }),
}));
export const relations_proyectos_rels = relations(proyectos_rels, ({ one }) => ({
  parent: one(proyectos, {
    fields: [proyectos_rels.parent],
    references: [proyectos.id],
    relationName: "_rels",
  }),
  miembrosID: one(miembros, {
    fields: [proyectos_rels.miembrosID],
    references: [miembros.id],
    relationName: "miembros",
  }),
}));
export const relations_proyectos = relations(proyectos, ({ one, many }) => ({
  imagen_principal: one(media, {
    fields: [proyectos.imagen_principal],
    references: [media.id],
    relationName: "imagen_principal",
  }),
  imagenes_secundarias: many(proyectos_imagenes_secundarias, {
    relationName: "imagenes_secundarias",
  }),
  tecnologias: many(proyectos_tecnologias, {
    relationName: "tecnologias",
  }),
  _rels: many(proyectos_rels, {
    relationName: "_rels",
  }),
}));
export const relations_redes_sociales = relations(redes_sociales, ({ one }) => ({
  logo: one(media, {
    fields: [redes_sociales.logo],
    references: [media.id],
    relationName: "logo",
  }),
  logo_monocromatico: one(media, {
    fields: [redes_sociales.logo_monocromatico],
    references: [media.id],
    relationName: "logo_monocromatico",
  }),
}));
export const relations_tecnologias = relations(tecnologias, ({ one }) => ({
  logo: one(media, {
    fields: [tecnologias.logo],
    references: [media.id],
    relationName: "logo",
  }),
  logo_monocromatico: one(media, {
    fields: [tecnologias.logo_monocromatico],
    references: [media.id],
    relationName: "logo_monocromatico",
  }),
}));
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: "_rels",
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: "users",
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: "media",
    }),
    cargosID: one(cargos, {
      fields: [payload_locked_documents_rels.cargosID],
      references: [cargos.id],
      relationName: "cargos",
    }),
    eventosID: one(eventos, {
      fields: [payload_locked_documents_rels.eventosID],
      references: [eventos.id],
      relationName: "eventos",
    }),
    miembrosID: one(miembros, {
      fields: [payload_locked_documents_rels.miembrosID],
      references: [miembros.id],
      relationName: "miembros",
    }),
    proyectosID: one(proyectos, {
      fields: [payload_locked_documents_rels.proyectosID],
      references: [proyectos.id],
      relationName: "proyectos",
    }),
    redes_socialesID: one(redes_sociales, {
      fields: [payload_locked_documents_rels.redes_socialesID],
      references: [redes_sociales.id],
      relationName: "redes_sociales",
    }),
    tecnologiasID: one(tecnologias, {
      fields: [payload_locked_documents_rels.tecnologiasID],
      references: [tecnologias.id],
      relationName: "tecnologias",
    }),
  }),
);
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: "_rels",
    }),
  }),
);
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: "_rels",
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: "users",
    }),
  }),
);
export const relations_payload_preferences = relations(payload_preferences, ({ many }) => ({
  _rels: many(payload_preferences_rels, {
    relationName: "_rels",
  }),
}));
export const relations_payload_migrations = relations(payload_migrations, () => ({}));

type DatabaseSchema = {
  enum_proyectos_tipo_sistema: typeof enum_proyectos_tipo_sistema;
  enum_proyectos_estado: typeof enum_proyectos_estado;
  users: typeof users;
  media: typeof media;
  cargos: typeof cargos;
  eventos_fechas_horas: typeof eventos_fechas_horas;
  eventos_imagenes_secundarias: typeof eventos_imagenes_secundarias;
  eventos_asistentes: typeof eventos_asistentes;
  eventos_requisitos: typeof eventos_requisitos;
  eventos_publicaciones: typeof eventos_publicaciones;
  eventos: typeof eventos;
  eventos_rels: typeof eventos_rels;
  miembros_redes: typeof miembros_redes;
  miembros_fotos_secundarias: typeof miembros_fotos_secundarias;
  miembros: typeof miembros;
  proyectos_imagenes_secundarias: typeof proyectos_imagenes_secundarias;
  proyectos_tecnologias: typeof proyectos_tecnologias;
  proyectos: typeof proyectos;
  proyectos_rels: typeof proyectos_rels;
  redes_sociales: typeof redes_sociales;
  tecnologias: typeof tecnologias;
  payload_locked_documents: typeof payload_locked_documents;
  payload_locked_documents_rels: typeof payload_locked_documents_rels;
  payload_preferences: typeof payload_preferences;
  payload_preferences_rels: typeof payload_preferences_rels;
  payload_migrations: typeof payload_migrations;
  relations_users: typeof relations_users;
  relations_media: typeof relations_media;
  relations_cargos: typeof relations_cargos;
  relations_eventos_fechas_horas: typeof relations_eventos_fechas_horas;
  relations_eventos_imagenes_secundarias: typeof relations_eventos_imagenes_secundarias;
  relations_eventos_asistentes: typeof relations_eventos_asistentes;
  relations_eventos_requisitos: typeof relations_eventos_requisitos;
  relations_eventos_publicaciones: typeof relations_eventos_publicaciones;
  relations_eventos_rels: typeof relations_eventos_rels;
  relations_eventos: typeof relations_eventos;
  relations_miembros_redes: typeof relations_miembros_redes;
  relations_miembros_fotos_secundarias: typeof relations_miembros_fotos_secundarias;
  relations_miembros: typeof relations_miembros;
  relations_proyectos_imagenes_secundarias: typeof relations_proyectos_imagenes_secundarias;
  relations_proyectos_tecnologias: typeof relations_proyectos_tecnologias;
  relations_proyectos_rels: typeof relations_proyectos_rels;
  relations_proyectos: typeof relations_proyectos;
  relations_redes_sociales: typeof relations_redes_sociales;
  relations_tecnologias: typeof relations_tecnologias;
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels;
  relations_payload_locked_documents: typeof relations_payload_locked_documents;
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels;
  relations_payload_preferences: typeof relations_payload_preferences;
  relations_payload_migrations: typeof relations_payload_migrations;
};

declare module "@payloadcms/db-postgres" {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema;
  }
}
